
import atexit
import os
import signal
import subprocess
import sys
import time


processes = []

def start_plugin(script_name, port):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    env = os.environ.copy()
    
    # –í Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ Python
    cmd = [sys.executable, script_name]
    process = subprocess.Popen(cmd, env=env)
    processes.append(process)
    
    # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫ –≤ Docker
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
    if process.poll() is None:
        print(f"‚úÖ Started {script_name} on port {port}")
        return process
    else:
        print(f"‚ùå Failed to start {script_name}")
        processes.remove(process)
        return None

def cleanup():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\nüõë Stopping plugins...")
    for process in processes:
        try:
            process.terminate()
            process.wait(timeout=5)
            print(f"‚úÖ Stopped process {process.pid}")
        except subprocess.TimeoutExpired:
            print(f"‚ùå Force killing process {process.pid}")
            process.kill()
    print("‚úÖ All plugins stopped")

def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    atexit.register(cleanup)
    signal.signal(signal.SIGINT, lambda s, f: sys.exit(0))
    signal.signal(signal.SIGTERM, lambda s, f: sys.exit(0))
    
    print("üöÄ Starting Terraform Analysis Plugins...")
    print(f"üìÅ Working directory: {os.getcwd()}")
    print(f"üìÅ Contents: {os.listdir('.')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
    plugins_dir = "plugins"
    if not os.path.exists(plugins_dir):
        print(f"‚ùå Plugins directory not found: {plugins_dir}")
        return
    
    print(f"üìÅ Plugins directory contents: {os.listdir(plugins_dir)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
    plugins = [
        ("plugins/error_aggregator.py", 50051),
        ("plugins/security_scanner.py", 50052),
        ("plugins/performance_analyzer.py", 50053),
    ]
    
    started_count = 0
    for script, port in plugins:
        if not os.path.exists(script):
            print(f"‚ùå Plugin script not found: {script}")
            continue
            
        process = start_plugin(script, port)
        if process:
            started_count += 1
    
    print(f"\nüéâ Started {started_count}/{len(plugins)} plugins")
    
    if started_count == 0:
        print("‚ùå No plugins were started successfully")
        return
    
    print("\nPress Ctrl+C to stop all plugins")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–∏—Å—å
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —É–ø–∞–≤—à–∏–µ
            for i, process in enumerate(processes[:]):
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è Plugin died, restarting...")
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ—Ä—Ç
                    script, port = plugins[i]
                    new_process = start_plugin(script, port)
                    if new_process:
                        processes[i] = new_process
            
            time.sleep(5)
    except KeyboardInterrupt:
        print("\nüõë Received interrupt signal")

if __name__ == '__main__':
    main()