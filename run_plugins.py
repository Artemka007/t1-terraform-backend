import subprocess
import sys
import os
import time
import signal
import atexit

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

processes = []

def start_plugin(script_name, port):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    env = os.environ.copy()
    env['PYTHONPATH'] = os.path.dirname(os.path.abspath(__file__))
    
    cmd = [sys.executable, script_name]
    process = subprocess.Popen(cmd, env=env)
    processes.append(process)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(2)
    
    print(f"‚úÖ Started {script_name} on port {port}")
    return process

def cleanup():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\nüõë Stopping plugins...")
    for process in processes:
        try:
            process.terminate()
            process.wait(timeout=5)
        except:
            process.kill()
    print("‚úÖ All plugins stopped")

def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    atexit.register(cleanup)
    signal.signal(signal.SIGINT, lambda s, f: cleanup())
    
    print("üöÄ Starting Terraform Analysis Plugins...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
    plugins = [
        ("plugins/error_aggregator.py", 50051),
        ("plugins/security_scanner.py", 50052),
        ("plugins/performance_analyzer.py", 50053),
    ]
    
    for script, port in plugins:
        if not os.path.exists(script):
            print(f"‚ùå Plugin script not found: {script}")
            continue
        start_plugin(script, port)
    
    print(f"\nüéâ All plugins started! Available plugins:")
    print("   - error-aggregator (localhost:50051)")
    print("   - security-scanner (localhost:50052)") 
    print("   - performance-analyzer (localhost:50053)")
    print("\nPress Ctrl+C to stop all plugins")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–∏—Å—å
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()